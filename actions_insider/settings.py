"""
Django settings for actions_insider project.

Generated by 'django-admin startproject' using Django 3.2b1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

import os
import ssl

import dj_database_url
from django.urls import reverse_lazy
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-3r814)vvtkr9vf&ile@ac#c0*vbnom5b2ww*p06(0i=@u@l@-$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG") == "True"

ALLOWED_HOSTS = [
    "actions.eduramirez.com",
    "buildbudget.dev",
    "localhost",
    "192.168.1.148",
    "0.0.0.0",
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "actions_data",
    "blog",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "social_django",
    "django_celery_results",
    "djangoql",
]

MIDDLEWARE = [
    "django.middleware.cache.UpdateCacheMiddleware",
    "actions_insider.middleware.SecurityScanBlockerMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "actions_insider.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]

WSGI_APPLICATION = "actions_insider.wsgi.application"

# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600, ssl_require=os.getenv("DATABASE_SSL_REQUIRED") == "True"
    )
}

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STATIC_ROOT = BASE_DIR / "staticfiles"

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "[%(name)s] [%(asctime)s]: %(levelname)s: %(message)s",
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "celery": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        },
        "actions_data": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        },
        "backend": {
            "level": "INFO",
            "handlers": [
                "console",
            ],
        },
        "": {
            "handlers": [
                "console",
            ],
            "level": "INFO",
        },
    },
}


SOCIAL_AUTH_JSONFIELD_ENABLED = True
SOCIAL_AUTH_REDIRECT_IS_HTTPS = os.getenv("SOCIAL_AUTH_REDIRECT_IS_HTTPS") == "True"
SOCIAL_AUTH_LOGIN_REDIRECT_URL = "/settings/"
SOCIAL_AUTH_GITHUB_APP_KEY = os.getenv("GITHUB_APP_CLIENT_ID")
SOCIAL_AUTH_GITHUB_APP_SECRET = os.getenv("GITHUB_APP_CLIENT_SECRET")
GITHUB_APP_APP_ID = os.getenv("GITHUB_APP_APP_ID")
GITHUB_APP_URL = os.getenv("GITHUB_APP_URL")
GITHUB_APP_PRIVATE_KEY = (
    os.getenv("GITHUB_APP_PRIVATE_KEY").replace("\\n", "\n").replace("\n\n", "\n")
)
SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    "social_core.pipeline.social_auth.social_details",
    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    "social_core.pipeline.social_auth.social_uid",
    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    "social_core.pipeline.social_auth.auth_allowed",
    # Checks if the current social-account is already associated in the site.
    "social_core.pipeline.social_auth.social_user",
    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    "social_core.pipeline.user.get_username",
    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',
    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',
    # Create a user account if we haven't found one yet.
    "social_core.pipeline.user.create_user",
    # Create the record that associates the social account with the user.
    "social_core.pipeline.social_auth.associate_user",
    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    "social_core.pipeline.social_auth.load_extra_data",
    # Update the user record with any changed info from the auth service.
    "social_core.pipeline.user.user_details",
)

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "social_core.backends.github.GithubAppAuth",
)

LOGIN_URL = reverse_lazy("social:begin", args=["github-app"])
LOGOUT_URL = "logout"
LOGIN_REDIRECT_URL = "stats_by_workflow"
LOGOUT_REDIRECT_URL = "landing_page"

# Celery
CELERY_BROKER_URL = os.getenv("REDIS_URL")
CELERY_RESULT_BACKEND = "django-db"
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_RESULT_EXTENDED = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_WORKER_MAX_MEMORY_PER_CHILD = 300_000
CELERY_WORKER_MAX_TASKS_PER_CHILD = 3
CELERY_BROKER_USE_SSL = {"ssl_cert_reqs": ssl.CERT_NONE}


MAIN_URL = os.getenv("MAIN_URL")
WEBHOOK_RELATIVE_URL = "webhook"
WEBHOOK_URL = MAIN_URL + "/" + WEBHOOK_RELATIVE_URL

DEMO_USERNAME = "demo_machine"
DEMO_WEBHOOK_ID = 1
DEMO_INSTALLATION_ID = 1

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = "smtp.sendgrid.net"
EMAIL_HOST_USER = "apikey"  # this is exactly the value 'apikey'
EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
EMAIL_PORT = 587
EMAIL_USE_TLS = True

CSRF_TRUSTED_ORIGINS = [
    "https://actions.eduramirez.com",
    "https://buildbudget.dev",
    "http://localhost",
]

TESTS_RUNNING = os.getenv("TESTS_RUNNING") == "True"
if TESTS_RUNNING:
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]

# Fixed costs per minute for GitHub-hosted runners
GITHUB_HOSTED_RUNNER_COSTS = {
    # Standard Linux runners
    "ubuntu-latest": 0.008,  # private repos (free for public)
    "ubuntu-24.04": 0.008,  # private repos (free for public)
    "ubuntu-22.04": 0.008,  # private repos (free for public)
    "ubuntu-20.04": 0.008,  # private repos (free for public)
    # Standard Windows runners
    "windows-latest": 0.016,  # private repos (free for public)
    "windows-2022": 0.016,  # private repos (free for public)
    "windows-2019": 0.016,  # private repos (free for public)
    # Standard macOS runners
    "macos-12": 0.08,
    "macos-13": 0.08,
    "macos-latest": 0.08,
    "macos-14": 0.08,
    "macos-15": 0.08,
    # macOS larger runners (Intel)
    "macos-latest-large": 0.12,
    "macos-12-large": 0.12,
    "macos-13-large": 0.12,
    "macos-14-large": 0.12,
    "macos-15-large": 0.12,
    # macOS larger runners (M1)
    "macos-latest-xlarge": 0.16,
    "macos-13-xlarge": 0.16,
    "macos-14-xlarge": 0.16,
    "macos-15-xlarge": 0.16,
}


CACHES = {
    "default": {
        "BACKEND": os.environ.get(
            "CACHE_BACKEND", "django.core.cache.backends.redis.RedisCache"
        ),
        "LOCATION": os.environ.get("REDIS_URL"),
        "OPTIONS": {"ssl_cert_reqs": None},
        "TIMEOUT": 60 * 3,
        "VERSION": 2,
    }
}
CACHE_MIDDLEWARE_ALIAS = "default"
CACHE_MIDDLEWARE_SECONDS = 60 * 5
CACHE_MIDDLEWARE_KEY_PREFIX = "django_cache"
DEMO_CACHE_TIMEOUT = 60 * 60

BLOG_ROOT = BASE_DIR / "blog" / "posts"
